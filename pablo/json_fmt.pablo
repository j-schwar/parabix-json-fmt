kernel Split :: [<i1>[1] in] -> [<i1>[2] out] {
    mask = Repeat(1, 0x5555555555555555)
    out[0] = in[0] & mask
    out[1] = InFile(~out[0])
}

type JsonLex = <i1>[7] {
    openers,
    closers,
    comma,
    colon,
    openQuote,
    closeQuote,
    ws
}

type InsertLFData = <i1>[1] {
    insertLFBefore
}

type IndentData = <i1>[2] {
    increaseIndent,
    decreaseIndent
}

kernel AnalyzeJson :: [JsonLex lex] -> [InsertLFData lf, IndentData indent] {
    valueMask = InclusiveSpan(lex.openQuote, lex.closeQuote)

    # mask off any control tokens which appear in values
    openers = lex.openers & ~valueMask
    closers = lex.closers & ~valueMask
    comma = lex.comma & ~valueMask

    lf.insertLFBefore = Advance(openers) | Advance(comma) | closers
    indent.increaseIndent = Advance(openers)
    indent.decreaseIndent = closers
}

kernel FindSpreadInsertLocations :: [<i1>[1] mask] -> [<i1>[2] insert] {
    notMask = ~mask[0]
    lf = InFile(Advance(mask[0])) & notMask
    space = InFile(notMask & ~lf)

    insert[0] = lf
    insert[1] = space
}

kernel InsertLF :: [<i1>[1] mask, <i1>[8] basis] -> [<i1>[8] out] {
    out[0] = basis[0]
    out[1] = basis[1] | mask[0]
    out[2] = basis[2]
    out[3] = basis[3] | mask[0]
    out[4] = basis[4]
    out[5] = basis[5]
    out[6] = basis[6]
    out[7] = basis[7]
}

kernel InsertSpace :: [<i1>[1] mask, <i1>[8] basis] -> [<i1>[8] out] {
    out[0] = basis[0]
    out[1] = basis[1]
    out[2] = basis[2]
    out[3] = basis[3]
    out[4] = basis[4]
    out[5] = basis[5] | mask[0]
    out[6] = basis[6]
    out[7] = basis[7]
}
